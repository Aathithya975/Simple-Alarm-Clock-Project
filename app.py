from flask import Flask, render_template, request, redirect, url_forimport datetimeimport timefrom playsound import playsound  # Make sure to install it: pip install playsoundimport threading  # For playing the alarm sound in the backgroundapp = Flask(__name__)alarm_time = Nonealarm_set = Falsedef play_alarm_sound():    """Plays the alarm sound."""    try:        playsound("alarm.mp3")  # Replace "alarm.mp3" with your sound file    except Exception as e:        print(f"Error playing sound: {e}")def check_alarm():    """Checks the time and plays the alarm if it's time."""    global alarm_time, alarm_set    while True:        if alarm_set:            now = datetime.datetime.now()            if alarm_time:                if now.strftime("%H:%M") == alarm_time.strftime("%H:%M"):                    print("Wake up!")                    # Play the alarm sound in a separate thread                    threading.Thread(target=play_alarm_sound, daemon=True).start()                    alarm_set = False  # Disable the alarm after it goes off        time.sleep(1)  # Check every second@app.route("/", methods=["GET", "POST"])def index():    global alarm_time, alarm_set    current_time = datetime.datetime.now().strftime("%H:%M:%S")    if request.method == "POST":        try:            hour = int(request.form["hour"])            minute = int(request.form["minute"])            alarm_time = datetime.datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)            alarm_set = True            print(f"Alarm set for: {alarm_time}")        except ValueError:            print("Invalid time format")    return render_template("index.html", current_time=current_time, alarm_set=alarm_set, alarm_time=alarm_time)if __name__ == "__main__":    # Start the alarm checking in a separate thread    threading.Thread(target=check_alarm, daemon=True).start()    app.run(debug=True)  # Set debug=False in production
